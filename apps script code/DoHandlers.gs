//–¥–æ–¥–∞—î —ñ–Ω—Ñ—É –ø—Ä–æ —á–∞—Ç –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–æ—Ç–∞
function handleBotRightsChanged(my_chat_member){
  let chat = my_chat_member.chat;
  let groupId = chat.id.toString();
  let groupName = chat.title;
  let groupType = chat.type;
  let botStatus = my_chat_member.new_chat_member.status;
  
  if (botStatus === 'member') {
    Logger.log(JSON.stringify(my_chat_member, null, 5));
    saveChatInfoIfNotSaved(groupId, groupName, groupType);
  }
}

function handleMessage(message) {
  //sendMessage(JSON.stringify(message))
  
  let user = message.from;

  let messageText = message.text;

  if(messageText.includes('@adding_roles_bot')){ //–ø–µ—Ä–µ—Ä–æ–±–∏—Ç–∏ –ø—ñ–¥ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ–≥ –±–æ—Ç–∞
    messageText = messageText.replace('@adding_roles_bot', '');
  }
  
  const commandParts = messageText.match(/^\/(\w+)(?:\s+(.+))?$/);

  let command = commandParts[1];
  
  //let [command, ...rest] = messageText.split(' ');
  //rest = rest.join(' ');
  //Logger.log(command);
  let result;
  switch (command) {
    case 'submsg'://done
      result = sendRegistrationMessage();
      break;
    case 'rolesmsg'://done
      result = sendGetRolesMessage();
      break;
    case 'setrole': //admin only! done
      const newCommandParts = commandParts[2].match(/^(@\w+)\s+(.*)$/);
      result = setRoleToUser(message.message_id, user.id, newCommandParts[1], newCommandParts[2]);
      break;
    case 'addrole': //admin only! done
      result = addRoleToTable(message.message_id, user.id, commandParts[2]);
      break;
    case 'deleterole': //admin only! done
      result = deleteRoleInTable(message.message_id, user.id, commandParts[2]);
      break;
    case 'removerole': //admin only! done
      result = removeRoleById(message.message_id, user.id);
      //—É–±—Ä–∞—Ç–∏ —Ä–æ–ª—å —Å–æ–±—ñ –ø–æ –∞–π–¥—ñ—à–Ω—ñ–∫—É
      break;
    case 'userinfo': //done
      if(commandParts[2]){
        result = getUserInfo(commandParts[2]);
      } else {
        result = getUserInfo(user.id);
      }
      //–ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–æ —Å–µ–±–µ —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
      break;
    case 'roleslist': //done
      result = getRolesList();
      //–ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ä–æ–ª—è—Ö (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–æ–ª—å $(–∫—ñ–ª—å–∫—ñ—Å—Ç—å —É —Ä–æ–ª—ñ)/$(–∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—å–æ–≥–æ): —Å–ø–∏—Å–æ–∫) –ë–ï–ó –ü–Ü–ù–ì–ê, –ü–û –ù–Ü–ö–ê–ú
      break;
    case 'updateusers': //admin only!
      //–∞–ø–¥–µ–π—Ç —ñ–Ω—Ñ–∏ –ø—Ä–æ —é–∑–µ—Ä—ñ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞–ª–µ –º–æ–∂–Ω–∞ —ñ –≤ —Ä—É—á–Ω—É
      break;   
    case 'pingrole': //admin only! done
      result = pingRole(message.message_id, user.id, commandParts[2]); //–ì–æ—Ç–æ–≤–æ
      //–ü—ñ–Ω–≥ –≤—Å—ñ—Ö –∑ —Ä–æ–ª—ñ
      break;    
    case 'togglereceive': //done
      //—Ü–µ –≤–∂–µ —î, –∫–Ω–æ–ø–∫–æ—é –∑—Ä–æ–±–ª–µ–Ω–æ
      break;     
    case 'togglebotmode': //admin only! done
      result = toggleBotRoleSettingMode(message.message_id, user.id);
      //–≤—Ä—É–±–∏—Ç–∏ —á–∏ –≤–∏—Ä—É–±–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—è —Å–æ–±—ñ —Ä–æ–ª—ñ (–∫–æ–ª–∏ false - –Ω–µ –º–æ–∂–Ω–∞ —É–±—Ä–∞—Ç–∏ —Å–æ–±—ñ —Ä–æ–ª—å —ñ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —è–∫—â–æ –≤–∂–µ —î –æ–¥–Ω–∞ –∞–±–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –º–æ–∂–Ω–∞ —è–∫—â–æ —Ü–µ –±—É–¥–µ —Å–∫–ª–∞–¥–Ω–æ)
      break;                  
    case 'help':
      result = sendHelpMessage();
    break;
    default:
      //sendMessage("Unknown command")
      setMessageReaction(message.message_id, "ü§®");
      break;
    }
    if(result !== undefined){
      setMessageReaction(message.message_id, result ? 'üëç' :  'üëé');
    }
}



function handleCallbackQuery(callback_query) {

  let user = callback_query.from;
  if (callback_query.data === "register") {
    registerUser(user);
  }
  if (callback_query.data === "silence_register") {
    registerUser(user);
    setPingStatus(user.id, false);
  }
  if (callback_query.data === "receiving") {
    setPingStatus(user.id, true);
  }
  if (callback_query.data === "muted") {
    setPingStatus(user.id, false);
  }
  if (callback_query.data.startsWith("getrole")) {
    let role = callback_query.data.split(' ', 2);
    getRole(user.id, role[1], false);
  }
}
